package com.reactive.examples.test.controller;

import com.reactive.examples.model.Product;
import com.reactive.examples.repository.ProductRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
@Slf4j
public class ProductControllerTest {
    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    ApplicationContext applicationContext;

    @Autowired
    private ProductRepository productRepository;


    @Autowired
    private DatabaseClient databaseClient;

    private List<Product> getData(){
        return Arrays.asList(new Product(null,"Brownie",new BigDecimal("0.65"),36,"https://google.com"),
                new Product(null,"Muffin",new BigDecimal("1.00"),24,"https://google.com1"),
                new Product(null,"Cake pop",new BigDecimal("1.50"),60,"https://google.com2"));
    }

    @BeforeEach
    public  void setup(){
        List<String> statements = Arrays.asList("DROP TABLE IF EXISTS product ;" +
                "CREATE TABLE product (\n" +
                "\tid INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "\tname VARCHAR ( 50 ) UNIQUE NOT NULL,\n" +
                "\tamount DECIMAL ,\n" +
                "\tprice DECIMAL  ,\n" +
                "\timage_path VARCHAR(255)\n" +
                "\n" +
                ");");

        statements.forEach(it -> databaseClient.execute(it)
                .fetch()
                .rowsUpdated()
                .block());

        productRepository.deleteAll()
                .thenMany(Flux.fromIterable(getData()))
                .flatMap(productRepository::save)
                .doOnNext(product ->{
                    System.out.println("Products are inserted from ProductControllerTest: " + product);
                })
                .blockLast();

    }

    @Test
    @WithMockUser
    public void getAllProductsValidateCount(){


            this.webTestClient = WebTestClient
                    .bindToApplicationContext(this.applicationContext)
                    .configureClient()
                    .build();

        webTestClient.get().uri("/api/product").exchange()

                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .expectBodyList(Product.class)
                .hasSize(3)
                .consumeWith(p ->{
                    List<Product> product = p.getResponseBody();
                    product.forEach( u ->{
                        assertTrue(u.getId() != null);
                    });
                });
    }

    @Test
    @WithMockUser
    public void productNotFound(){
        webTestClient.get().uri("/api/product".concat("/{id}"),"10")
                .exchange().expectStatus().isNotFound();
    }



}
